import { GraphQLError, isEnumType, isInputObjectType, isListType, isNonNullType, isObjectType, isScalarType, } from "graphql";
import reduce from "lodash.reduce";
import { isNone } from "./is-none";
function ensureNullable(type) {
    return isNonNullType(type) ? type.ofType : type;
}
export class Parser {
    constructor(schema, functionsMap, validateEnums) {
        this.schema = schema;
        this.functionsMap = functionsMap;
        this.validateEnums = validateEnums;
    }
    parseObjectWithSelections(data, type, selections) {
        const fieldMap = type.getFields();
        const fn = (d, fieldNode) => this.treatSelection(d, fieldMap, fieldNode);
        return reduce(selections, fn, data);
    }
    treatSelection(data, fieldMap, fieldNode) {
        const name = fieldNode.name.value;
        const field = fieldMap[name];
        if (!field)
            return data;
        const key = fieldNode.alias ? fieldNode.alias.value : fieldNode.name.value;
        data[key] = this.treatValue(data[key], field.type, fieldNode);
        return data;
    }
    treatValue(value, givenType, fieldNode) {
        const type = ensureNullable(givenType);
        if (isNone(value))
            return value;
        if (isScalarType(type)) {
            return this.parseScalar(value, type);
        }
        if (isEnumType(type)) {
            this.validateEnum(value, type);
            return value;
        }
        if (isListType(type)) {
            return this.parseArray(value, type, fieldNode);
        }
        return this.parseNestedObject(value, type, fieldNode);
    }
    parseScalar(value, type) {
        const fns = this.functionsMap[type.name] || type;
        return fns.parseValue(value);
    }
    validateEnum(value, type) {
        if (!this.validateEnums || !value)
            return;
        const enumValues = type.getValues().map((v) => v.value);
        if (!enumValues.includes(value)) {
            throw new GraphQLError(`enum "${type.name}" with invalid value`);
        }
    }
    parseArray(value, type, fieldNode) {
        return Array.isArray(value) ? value.map((v) => this.treatValue(v, type.ofType, fieldNode)) : value;
    }
    parseNestedObject(value, givenType, fieldNode) {
        if (!value || !fieldNode || !fieldNode.selectionSet || !fieldNode.selectionSet.selections.length) {
            return value;
        }
        const type = this.getObjectTypeFrom(value, givenType);
        return type ? this.parseObjectWithSelections(value, type, fieldNode.selectionSet.selections) : value;
    }
    getObjectTypeFrom(value, type) {
        if (isInputObjectType(type) || isObjectType(type))
            return type;
        if (!value.__typename)
            return null;
        const valueType = this.schema.getType(value.__typename);
        return isInputObjectType(valueType) || isObjectType(valueType) ? valueType : null;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFyc2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2xpYi9wYXJzZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUVMLFlBQVksRUFhWixVQUFVLEVBQ1YsaUJBQWlCLEVBQ2pCLFVBQVUsRUFDVixhQUFhLEVBQ2IsWUFBWSxFQUNaLFlBQVksR0FDYixNQUFNLFNBQVMsQ0FBQztBQUNqQixPQUFPLE1BQU0sTUFBTSxlQUFlLENBQUM7QUFHbkMsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUtuQyxTQUFTLGNBQWMsQ0FBQyxJQUEwQztJQUNoRSxPQUFPLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO0FBQ2xELENBQUM7QUFFRCxNQUFNLE9BQU8sTUFBTTtJQUNqQixZQUFxQixNQUFxQixFQUFXLFlBQTBCLEVBQVcsYUFBc0I7UUFBM0YsV0FBTSxHQUFOLE1BQU0sQ0FBZTtRQUFXLGlCQUFZLEdBQVosWUFBWSxDQUFjO1FBQVcsa0JBQWEsR0FBYixhQUFhLENBQVM7SUFBRyxDQUFDO0lBRTdHLHlCQUF5QixDQUM5QixJQUFVLEVBQ1YsSUFBZ0QsRUFDaEQsVUFBdUM7UUFFdkMsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBQ2xDLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FBTyxFQUFFLFNBQTJCLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQyxFQUFFLFFBQVEsRUFBRSxTQUFTLENBQUMsQ0FBQztRQUNqRyxPQUFPLE1BQU0sQ0FBQyxVQUFVLEVBQUUsRUFBRSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ3RDLENBQUM7SUFFUyxjQUFjLENBQ3RCLElBQVUsRUFDVixRQUEwRCxFQUMxRCxTQUEyQjtRQUUzQixNQUFNLElBQUksR0FBRyxTQUFT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